{"version":3,"sources":["components/Header.module.scss","components/Card.module.scss","components/CardGrid.module.scss","helpers/helpers.js","hooks/useShuffleState.js","components/Header.js","components/Card.js","components/CardGrid.js","seedCards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","shuffle","array","arr","i","length","j","Math","floor","random","useShuffleState","initialState","useState","state","setState","Header","score","topScore","className","styles","root","title","win","Card","id","img","handleClick","onClick","image","src","alt","CardGrid","cards","map","card","key","App","seedCards","shuffleCards","setScore","setTopScore","useEffect","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60f9fe16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Header_root__1Z-h9\",\"title\":\"Header_title__284EO\",\"score\":\"Header_score__15w4f\",\"win\":\"Header_win__HEYIB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Card_root__Xod19\",\"image\":\"Card_image__2XPik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"CardGrid_root__1UMr1\"};","// JavaScript implementation of the Durstenfeld shuffle\nexport const shuffle = (array) => {\n  const arr = [...array];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n","import { useState } from 'react';\nimport { shuffle } from '../helpers/helpers';\n\nfunction useShuffleState(initialState) {\n  const [state, setState] = useState(shuffle(initialState));\n\n  const shuffleState = () => {\n    setState(shuffle(initialState));\n  };\n\n  return [state, shuffleState];\n}\n\nexport default useShuffleState;\n","import React from 'react';\nimport styles from './Header.module.scss';\n\nfunction Header({ score, topScore }) {\n  return (\n    <header className={styles.root}>\n      <h1 className={styles.title}>Memory Card</h1>\n      <div className={styles.score}>\n        <h3>Score</h3>\n        <h2>{score}</h2>\n      </div>\n      <div className={`${styles.score} ${topScore === 12 ? styles.win : ''}`}>\n        <h3>Top Score</h3>\n        <h2>{topScore}</h2>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styles from './Card.module.scss';\n\nfunction Card({ id, img, handleClick }) {\n  return (\n    <div className={styles.root} onClick={() => handleClick(id)}>\n      <img\n        className={styles.image}\n        src={`https://source.unsplash.com/${img}/250x350`}\n        alt={`dog-${id}`}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport styles from './CardGrid.module.scss';\n\nfunction CardGrid({ cards, handleClick }) {\n  return (\n    <div className={styles.root}>\n      {cards.map((card) => (\n        <Card\n          key={card.id}\n          id={card.id}\n          img={card.img}\n          handleClick={handleClick}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default CardGrid;\n","export default [\n  { id: 0, img: 'dpb-qhtcA0A' },\n  { id: 1, img: 'tFiXn-Rjmb4' },\n  { id: 2, img: 'qNJpGSCv_Jc' },\n  { id: 3, img: 'v0_MCllHY9M' },\n  { id: 4, img: '2glK9ao5jYI' },\n  { id: 5, img: '11lRpYcvbrk' },\n  { id: 6, img: 'KZv7w34tluA' },\n  { id: 7, img: '09iA8GzINiI' },\n  { id: 8, img: 'IE2Z11zKsso' },\n  { id: 9, img: '7WF-9GaU-cM' },\n  { id: 10, img: 'xZ5E9H5DIi0' },\n  { id: 11, img: '80e_Gtz58Ks' },\n];\n","import React, { useEffect, useState } from 'react';\nimport useShuffleState from './hooks/useShuffleState';\nimport Header from './components/Header';\nimport CardGrid from './components/CardGrid';\nimport seedCards from './seedCards';\n\nfunction App() {\n  const [cards, shuffleCards] = useShuffleState(seedCards);\n  const [score, setScore] = useState([]);\n  const [topScore, setTopScore] = useState(0);\n\n  useEffect(\n    () => {\n      if (score.length > topScore) {\n        setTopScore(score.length);\n      }\n    },\n    [score, topScore]\n  );\n\n  const handleClick = (id) => {\n    if (score.includes(id)) {\n      setScore([]);\n    } else {\n      setScore([...score, id]);\n    }\n    shuffleCards(seedCards);\n  };\n\n  return (\n    <div>\n      <Header score={score.length} topScore={topScore} />\n      <CardGrid cards={cards} handleClick={handleClick} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}